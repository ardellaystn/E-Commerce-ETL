# PRODUCTS
# Cek data null
print("Jumlah data null:")
print(df_mdb_products.isnull().sum())

# Cek duplikat dan penanganan
df_mdb_products['channels'] = df_mdb_products['channels'].apply(lambda x: str(x) if isinstance(x, list) else x)
df_mdb_products['product_types'] = df_mdb_products['product_types'].apply(lambda x: str(x) if isinstance(x, list) else x)
print("Apakah terdapat data duplikat:")
print(df_mdb_products.duplicated().any())
print("Apakah terdapat kolom ID duplikat:")
print(df_mdb_products['_id'].duplicated().any())

# Cek type data (menyelaraskan formatnya)
print("Type data tabel Products sebelum penanganan:")
print(df_mdb_products.dtypes)

def correct_id_products(value):
    return bool(re.match(r"^PW\d{4}$", str(value)))
invalid_ids = df_mdb_products[~df_mdb_products['_id'].apply(correct_id_products)]
print(f"Jumlah ID yang tidak konsisten: {invalid_ids.shape[0]}")
print(invalid_ids[['_id']])

df_mdb_products.loc[df_mdb_products['category'].str.contains(r'[\s\.,;:]+', regex=True, na=False), 'category'] =  'Unknown'
invalid_category = df_mdb_products[ df_mdb_products['category'].str.contains(r'[\s\.,;:]+', regex=True, na=False)]
print(f"Jumlah category yang tidak konsisten: {invalid_category.shape[0]}")

df_mdb_products['created'] = pd.to_datetime(df_mdb_products['created'], errors='coerce')

def correct_product_types(value):
    if isinstance(value, list):
        return all(bool(re.match(r"^PSKU\d{4}$", str(v))) for v in value)
    return True
invalid_ids = df_mdb_products[~df_mdb_products['product_types'].apply(correct_product_types)]
print(f"Jumlah Product types yang tidak konsisten: {invalid_ids.shape[0]}")
print(invalid_ids[['product_types']])

modus_channels = df_mdb_products['channels'].mode()[0] 
def correct_channels_format(value, modus):
    if value in ['', ' ', '.']:
        return modus
    return value 
df_mdb_products['channels'] = df_mdb_products['channels'].apply(lambda x: correct_channels_format(x, modus_channels))
invalid_channels = df_mdb_products[df_mdb_products['channels'].isin([modus_channels])]
print(f"Jumlah nilai yang tidak valid pada kolom 'channels' yang telah diganti: {invalid_channels.shape[0]}")
print(invalid_channels[['channels']])

import ast
df_mdb_products['product_types'] = df_mdb_products['product_types'].apply(
    lambda x: ast.literal_eval(x) if isinstance(x, str) and x.startswith('[') else x
)
df_mdb_products['channels'] = df_mdb_products['channels'].apply(
    lambda x: ast.literal_eval(x) if isinstance(x, str) and x.startswith('[') else x
)
df_mdb_products = df_mdb_products.explode('product_types')
df_mdb_products = df_mdb_products.explode('channels')

def regenerate_ids(df, id_prefix="PW"):
    df = df.reset_index(drop=True)
    new_ids = [f"{id_prefix}{str(i + 1).zfill(4)}" for i in range(len(df))]
    df['_id'] = new_ids
    return df
df_mdb_products = regenerate_ids(df_mdb_products)
