# PASSWORDS
# Cek data null
print("Jumlah data null:")
print(df_combined_passwords.isna().sum())

def generate_id_passwords(existing_ids, prefix="USR"):
    valid_ids = [x[len(prefix):] for x in existing_ids if x.startswith(prefix) and x[len(prefix):].isdigit()]
    if valid_ids:
        max_id = max([int(x) for x in valid_ids])
    else:
        max_id = 0
    new_user_id = f"{prefix}{max_id + 1}"
    return new_user_id
existing_ids = set(df_combined_passwords['user_id'].dropna().tolist())
null_ids = df_combined_passwords[df_combined_passwords['user_id'].isna()]
for idx, row in null_ids.iterrows():
    new_user_id = generate_id_passwords(existing_ids)
    df_combined_passwords.at[idx, 'user_id'] = new_user_id
    existing_ids.add(new_user_id)

# import random
# import string
# def generate_hashed_password(length=64):
#     characters = string.ascii_letters + string.digits
#     return ''.join(random.choices(characters, k=length))
# def fill_missing_hashed_password_based_on_pattern(df_combined_passwords, column_name="hashed_password", existing_pattern_length=64):
#     df_combined_passwords[column_name] = df_combined_passwords[column_name].apply(
#         lambda x: generate_hashed_password(existing_pattern_length) if pd.isna(x) else x)
#     return df_combined_passwords
# df_combined_passwords = fill_missing_hashed_password_based_on_pattern(df_combined_passwords, column_name="hashed_password")

from faker import Faker
faker = Faker()
def generate_fake_hashed_password(length=64):
    characters = ''.join(faker.random_choices("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", length))
    return characters
def fill_missing_hashed_password_with_faker(df, column_name="hashed_password", length=64):
    df[column_name] = df[column_name].apply(
        lambda x: generate_fake_hashed_password(length) if pd.isna(x) or x == '' else x)
    return df
df_combined_passwords = fill_missing_hashed_password_with_faker(df_combined_passwords)

import uuid
def generate_reset_code():
    return str(uuid.uuid4())
def fill_missing_reset_code_with_uuid(df, column_name="reset_code"):
    df[column_name] = df[column_name].apply(
        lambda x: generate_reset_code() if pd.isna(x) or x == '' else x)
    return df
df_combined_passwords = fill_missing_reset_code_with_uuid(df_combined_passwords)

print("Jumlah data null setelah penanganan:")
print(df_combined_passwords.isnull().sum())

# Cek duplikat dan penanganan
print("Apakah terdapat data duplikat:")
print(df_combined_passwords.duplicated().any())
print("Apakah terdapat kolom ID duplikat:")
print(df_combined_passwords['id'].duplicated().any())
print("Data yang memiliki ID duplikat:")
duplicate_rows_passwords = df_combined_passwords[df_combined_passwords.duplicated(subset=['id'], keep=False)]
print(duplicate_rows_passwords)

def generate_id_passwords(existing_ids, prefix="PW"):
    valid_ids = [x[len(prefix):] for x in existing_ids if x.startswith(prefix) and x[len(prefix):].isdigit()]
    max_id = max([int(x) for x in valid_ids], default=0)
    new_id = f"{prefix}{max_id + 1}"
    return new_id
existing_ids = set(df_combined_passwords['id'].tolist())
duplicate_ids = df_combined_passwords['id'][df_combined_passwords['id'].duplicated()].tolist()
for duplicate_id in duplicate_ids:
    duplicate_indices = df_combined_passwords.index[df_combined_passwords['id'] == duplicate_id].tolist()
    for idx in duplicate_indices[1:]:
        new_id = generate_id_passwords(existing_ids)
        df_combined_passwords.at[idx, 'id'] = new_id
        existing_ids.add(new_id)

print("Apakah terdapat kolom ID duplikat setelah penanganan:")
print(df_combined_passwords['id'].duplicated().any())

# Cek type data (menyelaraskan formatnya)
print("Type data tabel Passwords sebelum penanganan:")
print(df_combined_passwords.dtypes)

def correct_id_password(value):
    return bool(re.match(r"^PW\d{4}$", str(value)))
invalid_ids = df_combined_passwords[~df_combined_passwords['id'].apply(correct_id_password)]
print(f"Jumlah ID yang tidak konsisten: {invalid_ids.shape[0]}")
print(invalid_ids[['id']])

def correct_user_id(value):
    return bool(re.match(r"^USR\d{4}$", str(value)))
invalid_ids = df_combined_passwords[~df_combined_passwords['user_id'].apply(correct_user_id)]
print(f"Jumlah User ID yang tidak konsisten: {invalid_ids.shape[0]}")
print(invalid_ids[['user_id']])

df_combined_passwords[['hashed_password', 'reset_code']] = df_combined_passwords[['hashed_password', 'reset_code']].astype(object)

df_combined_passwords['reset_expires'] = pd.to_datetime(df_combined_passwords['reset_expires'], errors='coerce')
invalid_expires = df_combined_passwords[df_combined_passwords['reset_expires'].isna()]
print(f"Jumlah nilai reset_expires yang tidak konsisten: {invalid_expires.shape[0]}")
print(invalid_expires[['reset_expires']])
